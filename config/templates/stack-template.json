{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "kube-aws Kubernetes cluster {{.ClusterName}}",
  "Mappings" : {
    "EtcdInstanceParams" : {
      "UserData" : {
        "cloudconfig" : "{{.UserDataEtcd}}"
      }
    }
  },
  "Parameters": {
    "ClusterName": {
      "Type" : "String",
      "Default" : "{{.ClusterName}}"
    },
    "VPCCIDR": {
      "Type" : "String",
      "Default" : "{{.VPC.CIDR}}"
    }

    {{if .VPC.ID}}
    ,
    "{{.VPC.LogicalName}}": {
      "Type" : "AWS::EC2::VPC::Id",
      "Default" : "{{.VPC.ID}}"
    }
    {{end}}

    {{if .InternetGateway.ID}}
    ,
    "{{.InternetGateway.LogicalName}}": {
      "Type" : "String",
      "Default" : "{{.InternetGateway.ID}}"
    }
    {{end}}

    {{if .RouteTable.ID}}
    ,
    "{{.RouteTable.LogicalName}}": {
      "Type" : "String",
      "Default" : "{{.RouteTable.ID}}"
    }
    {{end}}

    {{range $index, $subnet := .Subnets}}
    {{if $subnet.ID}}
    ,
    "{{$subnet.LogicalName}}": {
      "Type" : "String",
      "Default" : "{{$subnet.ID}}"
    }
    {{end}}
    {{if $subnet.NatGateway.ID}}
    ,
    "{{$subnet.NatGatewayLogicalName}}": {
      "Type" : "String",
      "Default" : "{{$subnet.NatGateway.ID}}"
    }
    {{end}}
    {{if $subnet.NatGateway.EIPAllocation.ID}}
    ,
    "{{$subnet.NatGatewayEIPAllocationLogicalName}}": {
      "Type" : "String",
      "Default" : "{{$subnet.NatGateway.EIPAllocation.ID}}"
    }
    {{end}}
    {{if $subnet.PrivateRouteTable.ID}}
    ,
    "{{$subnet.PrivateRouteTableLogicalName}}": {
      "Type" : "String",
      "Default" : "{{$subnet.PrivateRouteTable.ID}}"
    }
    {{end}}
    {{end}}

    {{range $index, $subnet := .Etcd.PrivateSubnets}}
    {{if $subnet.ID}}
    ,
    "{{$subnet.LogicalName "Etcd"}}": {
      "Type" : "String",
      "Default" : "{{$subnet.ID}}"
    }
    {{end}}
    {{end}}

    {{range $index, $subnet := .Controller.PrivateSubnets}}
    {{if $subnet.ID}}
    ,
    "{{$subnet.LogicalName "Controller"}}": {
      "Type" : "String",
      "Default" : "{{$subnet.ID}}"
    }
    {{end}}
    {{end}}

    {{range $index, $subnet := .Worker.PrivateSubnets}}
    {{if $subnet.ID}}
    ,
    "{{$subnet.LogicalName "Worker"}}": {
      "Type" : "String",
      "Default" : "{{$subnet.ID}}"
    }
    {{end}}
    {{end}}
  },
  "Resources": {
    {{if .MinWorkerCount}}
    "AutoScaleWorker": {
      "Properties": {
        "AvailabilityZones": [
          {{if $.Worker.TopologyPrivate}}
          {{range $index, $subnet := .Worker.PrivateSubnets}}
          {{if gt $index 0}},{{end}}
          "{{$subnet.AvailabilityZone}}"
          {{end}}
          {{else}}
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          "{{$subnet.AvailabilityZone}}"
          {{end}}
          {{end}}
        ],
        "HealthCheckGracePeriod": 600,
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfigurationWorker"
        },
        "MaxSize": "{{.MaxWorkerCount}}",
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "MinSize": "{{.MinWorkerCount}}",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "PropagateAtLaunch": "true",
            "Value": {"Ref": "ClusterName"}
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": "{{.ClusterName}}-kube-aws-worker"
          }
        ],
        {{if .Experimental.LoadBalancer.Enabled}}
        "LoadBalancerNames" : [
          {{range $index, $elb := .Experimental.LoadBalancer.Names}}
          {{if $index}},{{end}}
          "{{$elb}}"
          {{end}}
        ],
        {{end}}
        "VPCZoneIdentifier": [
          {{if $.Worker.TopologyPrivate}}
          {{range $index, $subnet := .Worker.PrivateSubnets}}
          {{if gt $index 0}},{{end}}
          {{$subnet.Ref "Worker"}}
          {{end}}
          {{else}}
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          {{$subnet.Ref}}
          {{end}}
          {{end}}
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      {{if .Experimental.WaitSignal.Enabled}}
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Count" : "{{.MinWorkerCount}}",
          "Timeout" : "{{.WorkerCreateTimeout}}"
        }
      },
      {{end}}
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" :
          {{if .WorkerSpotPrice}}
          "0"
          {{else}}
          "{{.WorkerRollingUpdateMinInstancesInService}}"
          {{end}},
          {{if .Experimental.WaitSignal.Enabled}}
          "WaitOnResourceSignals" : "true",
          "MaxBatchSize" : "{{.Experimental.WaitSignal.MaxBatchSize}}",
          "PauseTime": "{{.WorkerCreateTimeout}}"
          {{else}}
          "MaxBatchSize" : "1",
          "PauseTime": "PT2M"
          {{end}}
        }
      },
      "DependsOn" : ["AutoScaleController"]
    },
    {{end}}
    "AutoScaleController": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          {{if $.Controller.TopologyPrivate}}
          {{range $index, $subnet := .Controller.PrivateSubnets}}
          {{if gt $index 0}},{{end}}
          "{{$subnet.AvailabilityZone}}"
          {{end}}
          {{else}}
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          "{{$subnet.AvailabilityZone}}"
          {{end}}
          {{end}}
        ],
        "HealthCheckGracePeriod": 600,
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfigurationController"
        },
        "MaxSize": "{{.MaxControllerCount}}",
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "MinSize": "{{.MinControllerCount}}",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "PropagateAtLaunch": "true",
            "Value": {"Ref": "ClusterName"}
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": "{{.ClusterName}}-kube-aws-controller"
          }
        ],
        "VPCZoneIdentifier": [
          {{if $.Controller.TopologyPrivate}}
          {{range $index, $subnet := .Controller.PrivateSubnets}}
          {{if gt $index 0}},{{end}}
          {{$subnet.Ref "Controller"}}
          {{end}}
          {{else}}
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          {{$subnet.Ref}}
          {{end}}
          {{end}}
        ],
        "LoadBalancerNames" : [
          { "Ref" : "ElbAPIServer" }
        ]
      },
      {{if .Experimental.WaitSignal.Enabled}}
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Count" : "{{.MinControllerCount}}",
          "Timeout" : "{{.ControllerCreateTimeout}}"
        }
      },
      {{end}}
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "{{.ControllerRollingUpdateMinInstancesInService}}",
          "MaxBatchSize" : "1",
          {{if .Experimental.WaitSignal.Enabled}}
          "WaitOnResourceSignals" : "true",
          "PauseTime": "{{.ControllerCreateTimeout}}"
          {{else}}
          "PauseTime": "PT2M"
          {{end}}
        }
      }
    },
    {{ if .CreateRecordSet }}
    "ExternalDNS": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {{.HostedZone.Ref}},
        "Name": "{{.ExternalDNSName}}",
        "TTL": {{.RecordSetTTL}},
        "ResourceRecords": [{ "Fn::GetAtt": ["ElbAPIServer", "DNSName"]}],
        "Type": "CNAME"
      }
    },
    {{ end }}
    "IAMInstanceProfileController": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleController"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "IAMInstanceProfileWorker": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleWorker"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "IAMInstanceProfileEtcd": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleEtcd"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "IAMRoleController": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com{{if .IsChinaRegion}}.cn{{end}}"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "elasticloadbalancing:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {{if .Experimental.WaitSignal.Enabled}}
                {
                  "Action": "cloudformation:SignalResource",
                  "Effect": "Allow",
                  "Resource":
                    { "Fn::Join": [ "", [
                      "arn:aws:cloudformation:",
                      { "Ref": "AWS::Region" },
                      ":",
                      { "Ref": "AWS::AccountId" },
                      ":stack/",
                      { "Ref": "AWS::StackName" },
                      "/*" ]
                    ] }
                },
                {{end}}
                {{if .Experimental.AwsNodeLabels.Enabled}}
                {
                  "Action": "autoscaling:Describe*",
                  "Effect": "Allow",
                  "Resource": [ "*" ]
                },
                {{end}}
                {
                  "Action" : "kms:Decrypt",
                  "Effect" : "Allow",
                  "Resource" : "{{.KMSKeyARN}}"
                },
                {
                  "Action": [
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetRepositoryPolicy",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "IAMRoleWorker": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com{{if .IsChinaRegion}}.cn{{end}}"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:Describe*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "ec2:AttachVolume",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "ec2:DetachVolume",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action" : "kms:Decrypt",
                  "Effect" : "Allow",
                  "Resource" : "{{.KMSKeyARN}}"
                },
                {{if .Experimental.WaitSignal.Enabled}}
                {
                  "Action": "cloudformation:SignalResource",
                  "Effect": "Allow",
                  "Resource":
                    { "Fn::Join": [ "", [
                      "arn:aws:cloudformation:",
                      { "Ref": "AWS::Region" },
                      ":",
                      { "Ref": "AWS::AccountId" },
                      ":stack/",
                      { "Ref": "AWS::StackName" },
                      "/*" ]
                    ] }
                },
                {{end}}
                {{if .Experimental.AwsNodeLabels.Enabled}}
                {
                  "Action": "autoscaling:Describe*",
                  "Effect": "Allow",
                  "Resource": [ "*" ]
                },
                {{end}}
                {
                  "Action": [
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetRepositoryPolicy",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "IAMRoleEtcd": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com{{if .IsChinaRegion}}.cn{{end}}"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action" : "kms:Decrypt",
                  "Effect" : "Allow",
                  "Resource" : "{{.KMSKeyARN}}"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    {{range $etcdIndex, $etcdInstance := .EtcdInstances}}
    "InstanceEtcd{{$etcdIndex}}": {
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "{{$.EtcdRootVolumeSize}}",
              {{if gt $.EtcdRootVolumeIOPS 0}}
              "Iops": "{{$.EtcdRootVolumeIOPS}}",
              {{end}}
              "VolumeType": "{{$.EtcdRootVolumeType}}"
            }
          },
	      {
            "DeviceName": "/dev/xvdf",
	        {{if $.EtcdDataVolumeEphemeral}}
	        "VirtualName" : "ephemeral0"
	        {{else}}
            "Ebs": {
              "VolumeSize": "{{$.EtcdDataVolumeSize}}",
              {{if gt $.EtcdDataVolumeIOPS 0}}
              "Iops": "{{$.EtcdDataVolumeIOPS}}",
              {{end}}
              "VolumeType": "{{$.EtcdDataVolumeType}}"
            }
	        {{end}}
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfileEtcd"
        },
        "ImageId": "{{$.AMI}}",
        "InstanceType": "{{$.EtcdInstanceType}}",
        {{if $.KeyName}}"KeyName": "{{$.KeyName}}",{{end}}
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": {{not $.Etcd.TopologyPrivate}},
            "DeleteOnTermination": true,
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "SecurityGroupEtcd"
              }
            ],
            "PrivateIpAddress": "{{$etcdInstance.IPAddress}}",
            "SubnetId": {{$etcdInstance.SubnetRef}}
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          },
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-kube-aws-etcd-{{$etcdIndex}}"
          }
        ],
        "Tenancy": "{{$.EtcdTenancy}}",
        "UserData": { "Fn::FindInMap" : [ "EtcdInstanceParams", "UserData", "cloudconfig"] }
      },
      "Type": "AWS::EC2::Instance"
    },
    {{end}}
    "LaunchConfigurationWorker": {
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "{{.WorkerRootVolumeSize}}",
              {{if gt .WorkerRootVolumeIOPS 0}}
              "Iops": "{{.WorkerRootVolumeIOPS}}",
              {{end}}
              "VolumeType": "{{.WorkerRootVolumeType}}"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfileWorker"
        },
        "ImageId": "{{.AMI}}",
        "InstanceType": "{{.WorkerInstanceType}}",
        {{if .KeyName}}"KeyName": "{{.KeyName}}",{{end}}
        "SecurityGroups": [
          {{range $sgRef := .WorkerSecurityGroupRefs}}
            {{$sgRef}},
          {{end}}
          {
            "Ref": "SecurityGroupWorker"
          }
        ],
        {{if .WorkerSpotPrice}}
        "SpotPrice": {{.WorkerSpotPrice}},
        {{else}}
        "PlacementTenancy": "{{.WorkerTenancy}}",
        {{end}}
        "UserData": "{{ .UserDataWorker }}"
      },
{{ if .Experimental.AwsEnvironment.Enabled }}
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "commands": {
              "write-environment": {
                "command": { "Fn::Join" : ["", [ "echo '",
{{range $variable, $function := .Experimental.AwsEnvironment.Environment}}
"{{$variable}}=", {{$function}} , "\n",
{{end}}
"' > /etc/aws-environment" ] ] }
              }
            }
          }
        }
      },
{{end}}
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "LaunchConfigurationController": {
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "{{.ControllerRootVolumeSize}}",
              {{if gt .ControllerRootVolumeIOPS 0}}
              "Iops": "{{.ControllerRootVolumeIOPS}}",
              {{end}}
              "VolumeType": "{{.ControllerRootVolumeType}}"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfileController"
        },
        "ImageId": "{{.AMI}}",
        "InstanceType": "{{.ControllerInstanceType}}",
        {{if .KeyName}}"KeyName": "{{.KeyName}}",{{end}}
        "SecurityGroups": [
          {
            "Ref": "SecurityGroupController"
          }
        ],
        "PlacementTenancy": "{{ .ControllerTenancy }}",
        "UserData": "{{ .UserDataController }}"
      },
  {{ if .Experimental.AwsEnvironment.Enabled }}
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "commands": {
              "write-environment": {
                "command": { "Fn::Join" : ["", [ "echo '",
{{range $variable, $function := .Experimental.AwsEnvironment.Environment}}
"{{$variable}}=", {{$function}} , "\n",
{{end}}
"' > /etc/aws-environment" ] ] }
              }
            }
          }
        }
      },
  {{end}}
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "ElbAPIServer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
	    "CrossZone" : true,
        "HealthCheck" : {
          "HealthyThreshold" : "3",
          "Interval" : "10",
          "Target" : "TCP:443",
          "Timeout" : "8",
          "UnhealthyThreshold" : "3"
        },
        "Subnets" : [
          {{if .ControllerLoadBalancerPrivate}}
          {{range $index, $subnet := .Controller.PrivateSubnets}}
          {{if gt $index 0}},{{end}}
          {{$subnet.Ref "Controller"}}
          {{end}}
          {{else}}
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          {{$subnet.Ref}}
          {{end}}
          {{end}}
        ],
        "Listeners" : [
          {
            "InstancePort" : "443",
            "InstanceProtocol" : "TCP",
            "LoadBalancerPort" : "443",
            "Protocol" : "TCP"
          }
        ],
        {{if .ControllerLoadBalancerPrivate}}
        "Scheme": "internal",
        {{else}}
        "Scheme": "internet-facing",
        {{end}}
        "SecurityGroups" : [
          { "Ref" : "SecurityGroupElbAPIServer" }
        ]
      }
    },
    "SecurityGroupElbAPIServer" : {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          },
          {
             "CidrIp": "0.0.0.0/0",
             "FromPort": -1,
             "IpProtocol": "icmp",
             "ToPort": -1
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-sg-elb-api-server"
          },
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          }
        ],
        "VpcId": {{$.VPC.Ref}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupController": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "udp",
            "ToPort": 65535
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          },
          {
            "SourceSecurityGroupId" : { "Ref" : "SecurityGroupElbAPIServer" },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          },
          {
            "SourceSecurityGroupId" : { "Ref" : "SecurityGroupWorker" },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-sg-controller"
          },
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          }
        ],
        "VpcId": {{$.VPC.Ref}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupControllerIngressFromWorkerToEtcd": {
      "Properties": {
        "FromPort": 2379,
        "GroupId": {
          "Ref": "SecurityGroupController"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 2379
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorker": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "udp",
            "ToPort": 65535
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-sg-worker"
          },
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          }
        ],
        "VpcId": {{$.VPC.Ref}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupWorkerIngressFromControllerToFlannel": {
      "Properties": {
        "FromPort": 8472,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 8472
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromFlannelToController": {
      "Properties": {
        "FromPort": 8472,
        "GroupId": {
          "Ref": "SecurityGroupController"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 8472
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromControllerToKubelet": {
      "Properties": {
        "FromPort": 10250,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 10250
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromControllerTocAdvisor": {
      "Properties": {
        "FromPort": 4194,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 4194
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupEtcdIngressFromControllerToEtcd": {
      "Properties": {
        "FromPort": 2379,
        "GroupId": {
          "Ref": "SecurityGroupEtcd"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 2379
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupEtcdIngressFromWorkerToEtcd": {
      "Properties": {
        "FromPort": 2379,
        "GroupId": {
          "Ref": "SecurityGroupEtcd"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 2379
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToFlannel": {
      "Properties": {
        "FromPort": 8472,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 8472
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToWorkerKubeletReadOnly": {
      "Properties": {
        "FromPort": 10255,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 10255
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToControllerKubeletReadOnly": {
      "Properties": {
        "FromPort": 10255,
        "GroupId": {
          "Ref": "SecurityGroupController"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 10255
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupEtcd": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "udp",
            "ToPort": 65535
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 3,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-sg-etcd"
          },
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          }
        ],
        "VpcId": {{$.VPC.Ref}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupEtcdPeerHealthCheckIngress": {
      "Properties": {
        "FromPort": 2379,
        "GroupId": {
          "Ref": "SecurityGroupEtcd"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupEtcd"
        },
        "ToPort": 2379
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupEtcdPeerIngress": {
      "Properties": {
        "FromPort": 2380,
        "GroupId": {
          "Ref": "SecurityGroupEtcd"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupEtcd"
        },
        "ToPort": 2380
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    }
    {{if $.ElasticFileSystemID}}
    ,
    "SecurityGroupMountTarget": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": { "Ref": "SecurityGroupWorker" },
            "FromPort": 2049,
            "IpProtocol": "tcp",
            "ToPort": 2049
          },
          {
            "SourceSecurityGroupId": { "Ref": "SecurityGroupController" },
            "FromPort": 2049,
            "IpProtocol": "tcp",
            "ToPort": 2049
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-sg-mount-target"
          },
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          }
        ],
        "VpcId": {{$.VPC.Ref}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    }
    {{if .Worker.TopologyPrivate}}
    {{range $index, $subnet := .Worker.PrivateSubnets}}
    ,
    "{{$subnet.LogicalName "Worker"}}MountTarget": {
      "Properties" : {
        "FileSystemId": "{{$.ElasticFileSystemID}}",
        "SubnetId": {{$subnet.Ref "Worker"}},
        "SecurityGroups": [ { "Ref": "SecurityGroupMountTarget" } ]
      },
      "Type" : "AWS::EFS::MountTarget"
    }
    {{end}}
    {{else}}
    {{range $index, $subnet := .Subnets}}
    ,
    "{{$subnet.LogicalName}}MountTarget": {
      "Properties" : {
        "FileSystemId": "{{$.ElasticFileSystemID}}",
        "SubnetId": {{$subnet.Ref}},
        "SecurityGroups": [ { "Ref": "SecurityGroupMountTarget" } ]
      },
      "Type" : "AWS::EFS::MountTarget"
    }
    {{end}}
    {{end}}
    {{end}}

    {{range $index, $subnet := .Etcd.PrivateSubnets}}
    {{if not $subnet.ID}}
    ,
    "{{$subnet.LogicalName "Etcd"}}": {
      "Properties": {
        "AvailabilityZone": "{{$subnet.AvailabilityZone}}",
        "CidrBlock": "{{$subnet.InstanceCIDR}}",
        "MapPublicIpOnLaunch": {{not $.Etcd.TopologyPrivate}},
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-{{$subnet.LogicalName "Etcd"}}"
          },
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          }
        ],
        "VpcId": {{$.VPC.Ref}}
      },
      "Type": "AWS::EC2::Subnet"
    },
    "{{$subnet.LogicalName "Etcd"}}RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {{$subnet.PrivateRouteTableRef $.Subnets}},
        "SubnetId": {{$subnet.Ref "Etcd"}}
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
    {{end}}
    {{end}}

    {{range $index, $subnet := .Controller.PrivateSubnets}}
    {{if not $subnet.ID}}
    ,
    "{{$subnet.LogicalName "Controller"}}": {
      "Properties": {
        "AvailabilityZone": "{{$subnet.AvailabilityZone}}",
        "CidrBlock": "{{$subnet.InstanceCIDR}}",
        "MapPublicIpOnLaunch": {{not $.Controller.TopologyPrivate}},
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-{{$subnet.LogicalName "Controller"}}"
          },
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          }
        ],
        "VpcId": {{$.VPC.Ref}}
      },
      "Type": "AWS::EC2::Subnet"
    },
    "{{$subnet.LogicalName "Controller"}}RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {{$subnet.PrivateRouteTableRef $.Subnets}},
        "SubnetId": {{$subnet.Ref "Controller"}}
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
    {{end}}
    {{end}}

    {{range $index, $subnet := .Worker.PrivateSubnets}}
    {{if not $subnet.ID}}
    ,
    "{{$subnet.LogicalName "Worker"}}": {
      "Properties": {
        "AvailabilityZone": "{{$subnet.AvailabilityZone}}",
        "CidrBlock": "{{$subnet.InstanceCIDR}}",
        "MapPublicIpOnLaunch": {{not $.Worker.TopologyPrivate}},
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-{{$subnet.LogicalName "Worker"}}"
          },
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          }
        ],
        "VpcId": {{$.VPC.Ref}}
      },
      "Type": "AWS::EC2::Subnet"
    },
    "{{$subnet.LogicalName "Worker"}}RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {{$subnet.PrivateRouteTableRef $.Subnets}},
        "SubnetId": {{$subnet.Ref "Worker"}}
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
    {{end}}
    {{end}}

    {{if not .RouteTable.HasIdentifier}}
    ,
    "{{.RouteTable.LogicalName}}": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-{{.RouteTable.LogicalName}}"
          },
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          }
        ],
        "VpcId": {{$.VPC.Ref}}
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "{{.RouteTable.LogicalName}}ToInternetGateway": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {{.InternetGateway.Ref}},
        "RouteTableId": {{.RouteTable.Ref}}
      },
      "Type": "AWS::EC2::Route"
    }
    {{end}}

    {{range $index, $subnet := .Subnets}}
    {{if not $subnet.HasIdentifier}}
    ,
    "{{$subnet.LogicalName}}": {
      "Properties": {
        "AvailabilityZone": "{{$subnet.AvailabilityZone}}",
        "CidrBlock": "{{$subnet.InstanceCIDR}}",
        "MapPublicIpOnLaunch": {{$subnet.MapPublicIp}},
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-{{$subnet.LogicalName}}"
          },
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          }
        ],
        "VpcId": {{$.VPC.Ref}}
      },
      "Type": "AWS::EC2::Subnet"
    },
    "{{$subnet.LogicalName}}RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {{$.RouteTable.Ref}},
        "SubnetId": {{$subnet.Ref}}
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
    {{end}}
    {{end}}

    {{if (or .WorkerTopologyPrivate .Worker.TopologyPrivate .Etcd.TopologyPrivate .Controller.TopologyPrivate)}}
    {{range $index, $subnet := .Subnets}}
    {{if not $subnet.NatGateway.HasIdentifier}}
    {{if not $subnet.NatGateway.EIPAllocation.HasIdentifier}}
    ,
    "{{$subnet.NatGatewayEIPAllocationLogicalName}}": {
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    }
    {{end}}
    ,
    "{{$subnet.NatGatewayLogicalName}}": {
      "Properties": {
        "AllocationId": {{$subnet.NatGatewayEIPAllocationRef}},
        "SubnetId": {{$subnet.Ref}}
      },
      "Type": "AWS::EC2::NatGateway"
    }
    {{end}}
    {{if not $subnet.PrivateRouteTable.HasIdentifier}}
    ,
    "{{$subnet.PrivateRouteTableLogicalName}}": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-{{$subnet.PrivateRouteTableLogicalName}}"
          },
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          }
        ],
        "VpcId": {{$.VPC.Ref}}
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "{{$subnet.PrivateRouteTableLogicalName}}RouteToNatGateway": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {{$subnet.NatGatewayRef}},
        "RouteTableId": {{$subnet.PrivateRouteTableRef}}
      },
      "Type": "AWS::EC2::Route"
    }
    {{end}}
    {{end}}
    {{end}}

    {{if not .InternetGateway.HasIdentifier}}
    ,
    "{{.InternetGateway.LogicalName}}": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{$.ClusterName}}-igw"
          },
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    }
    {{end}}

    {{if not .VPC.HasIdentifier}}
    ,
    "{{.VPC.LogicalName}}": {
      "Properties": {
        "CidrBlock": {"Ref": "VPCCIDR"},
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": {"Ref": "ClusterName"}
          },
          {
            "Key": "Name",
            "Value": "{{.ClusterName}}-vpc"
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "VPCGatewayAttachment": {
      "Properties": {
        "InternetGatewayId": {"Ref": "InternetGateway"},
        "VpcId": {{$.VPC.Ref}}
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    }
    {{end}}
  },

  "Outputs": {
    {{if not $.VPC.IDFromStackOutput}}
    "{{$.VPC.LogicalName}}" : {
      "Description": "The VPC managed by this stack",
      "Value": {{$.VPC.Ref}},
      "Export": {"Name": {"Fn::Sub": "${AWS::StackName}-{{$.VPC.LogicalName}}"}}
    },
    {{end}}
    {{if not $.RouteTable.IDFromStackOutput}}
    "{{$.RouteTable.LogicalName}}" : {
      "Description": "The public route table assigned to the internet gateway for worker nodes",
      "Value":  {{$.RouteTable.Ref}},
      "Export": {"Name": {"Fn::Sub": "${AWS::StackName}-{{$.RouteTable.LogicalName}}"}}
    },
    {{end}}
    {{if (or $.WorkerTopologyPrivate $.Worker.TopologyPrivate)}}
    {{range $index, $subnet := $.Subnets}}
    {{if not $subnet.PrivateRouteTable.IDFromStackOutput}}
    "{{$subnet.PrivateRouteTableLogicalName}}" : {
      "Description" : "The private route table assigned to the nat gateway for worker nodes",
      "Value": {{$subnet.PrivateRouteTableRef}},
      "Export": {"Name": {"Fn::Sub": "${AWS::StackName}-{{$subnet.PrivateRouteTableLogicalName}}"}}
    },
    {{end}}
    {{end}}
    {{end}}
    "WorkerSecurityGroup": {
      "Description": "The security group assigned to worker nodes",
      "Value":  {"Ref": "SecurityGroupWorker"},
      "Export": {"Name": {"Fn::Sub": "${AWS::StackName}-WorkerSecurityGroup"}}
    }
  }
}
